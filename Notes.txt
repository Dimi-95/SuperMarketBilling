About the Add function, the idea is that it should not need manual input for the Item number,
meaning that, it would be better to let the program generate it.

Problems to solve:

a. Move all items back one Item number if an item is being removed
b. For the number to be generated by the program and not put manually in, it has to read at least the 
   last number of the last line written

https://stackoverflow.com/questions/11876290/c-fastest-way-to-read-only-last-line-of-text-file <------ fastes way to read the last line of text
https://stackoverflow.com/questions/22800879/how-to-search-for-a-word-in-a-text-file-and-if-found-print-out-the-entire-line <--- search for a word in text line

Possible solution for b: The idea is to read the last line, find the number, convert it into an int, save it into a variable, that will be used in our MAP function so that we can determine
                         which key the object will get assigned.



25.06: Stopped at trying to concatinate chars. Need to concatinate the chars into a string to turn it into an int.

Idea: instead of trying to pin point the number, seperate it  cout << "item nr:" << number << "rest of the text"


19.07: Things left to do 
      a. Add the ability to Remove items ( make it so that the numbers adjust, too)
      b. Edit Items, choose which item should be edited by the number it has, and what aspect should be edited

a. To accomplish this we have to read the amount of lines, which will label each line with a number, choose the line we want
   to remove, and delete it from the file. After that we need to fill in the gap that was created and correct the 
   numbers of each line

